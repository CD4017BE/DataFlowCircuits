modules(
 op 'basic_operators'
 lang 'langbuilder'
)
blocks(
 glsl(
  type 'const'
  model 'glsl'
  name 'GLSL objects'
  out('obj')
  arg('name')
 )
 bcast(
  type 'block'
  model 'op:cast'
  out('cast')
  in('t' 'v')
 )
 band(
  type 'block'
  model 'op:and'
  out('and')
  in('x' 'y')
 )
 bor(
  type 'block'
  model 'op:or'
  out('or')
  in('x' 'y')
 )
 bxor(
  type 'block'
  model 'op:xor'
  out('xor')
  in('x' 'y')
 )
 bnot(
  type 'block'
  model 'op:not'
  out('not')
  in('x')
 )
 beq(
  type 'block'
  model 'op:eq'
  out('eq')
  in('x' 'y')
 )
 icast(
  type 'block'
  model 'op:cast'
  out('cast')
  in('t' 'v')
 )
 iadd(
  type 'block'
  model 'op:add'
  out('sum')
  in('x' 'y')
 )
 isub(
  type 'block'
  model 'op:sub'
  out('dif')
  in('x' 'y')
 )
 imul(
  type 'block'
  model 'op:mul'
  out('prod')
  in('x' 'y')
 )
 idiv(
  type 'block'
  model 'op:div'
  out('quot')
  in('x' 'y')
 )
 ineg(
  type 'block'
  model 'op:neg'
  out('neg')
  in('x')
 )
 ieq(
  type 'block'
  model 'op:eq'
  out('eq')
  in('x' 'y')
 )
 ine(
  type 'block'
  model 'op:ne'
  out('ne')
  in('x' 'y')
 )
 ilt(
  type 'block'
  model 'op:lt'
  out('lt')
  in('x' 'y')
 )
 igt(
  type 'block'
  model 'op:gt'
  out('gt')
  in('x' 'y')
 )
 ile(
  type 'block'
  model 'op:le'
  out('le')
  in('x' 'y')
 )
 ige(
  type 'block'
  model 'op:ge'
  out('ge')
  in('x' 'y')
 )
 fcast(
  type 'block'
  model 'op:cast'
  out('cast')
  in('t' 'v')
 )
 fadd(
  type 'block'
  model 'op:add'
  out('sum')
  in('x' 'y')
 )
 fsub(
  type 'block'
  model 'op:sub'
  out('dif')
  in('x' 'y')
 )
 fmul(
  type 'block'
  model 'op:mul'
  out('prod')
  in('x' 'y')
 )
 fdiv(
  type 'block'
  model 'op:div'
  out('quot')
  in('x' 'y')
 )
 fmod(
  type 'block'
  model 'op:mod'
  out('mod')
  in('x' 'y')
 )
 fneg(
  type 'block'
  model 'op:neg'
  out('neg')
  in('x')
 )
 feq(
  type 'block'
  model 'op:eq'
  out('eq')
  in('x' 'y')
 )
 fne(
  type 'block'
  model 'op:ne'
  out('ne')
  in('x' 'y')
 )
 flt(
  type 'block'
  model 'op:lt'
  out('lt')
  in('x' 'y')
 )
 fgt(
  type 'block'
  model 'op:gt'
  out('gt')
  in('x' 'y')
 )
 fle(
  type 'block'
  model 'op:le'
  out('le')
  in('x' 'y')
 )
 fge(
  type 'block'
  model 'op:ge'
  out('ge')
  in('x' 'y')
 )
 bvcast(
  type 'block'
  model 'op:cast'
  out('cast')
  in('t' 'v')
 )
 bvnot(
  type 'block'
  model 'op:not'
  out('not')
  in('x')
 )
 bveq(
  type 'block'
  model 'op:eq'
  out('eq')
  in('x' 'y')
 )
 bvne(
  type 'block'
  model 'op:ne'
  out('ne')
  in('x' 'y')
 )
)
types(
 void(
  color 0
  text 'void'
 )
 bool(
  color 1
  text 'bool'
  ops(
   cast 'bcast'
   and 'band'
   or 'bor'
   xor 'bxor'
   not 'bnot'
   eq 'beq'
   ne 'bxor'
  )
 )
 int(
  color 2
  text 'int'
  ops(
   cast 'icast'
   add 'iadd'
   sub 'isub'
   mul 'imul'
   div 'idiv'
   neg 'ineg'
   eq 'ieq'
   ne 'ine'
   lt 'ilt'
   gt 'igt'
   le 'ile'
   ge 'ige'
  )
 )
 float(
  color 3
  text 'float'
  ops(
   cast 'fcast'
   add 'fadd'
   sub 'fsub'
   mul 'fmul'
   div 'fdiv'
   mod 'fmod'
   neg 'fneg'
   eq 'feq'
   ne 'fne'
   lt 'flt'
   gt 'fgt'
   le 'fle'
   ge 'fge'
  )
 )
 bvec(
  color 4
  text 'bvec$n'
  ops(
   cast 'bvcast'
   not 'bvnot'
   eq 'bveq'
   ne 'bvne'
  )
 )
 ivec(
  color 5
  text 'ivec$n'
  ops(
   cast 'ivcast'
   add 'ivadd'
   sub 'ivsub'
   mul 'ivmul'
   div 'ivdiv'
   mod 'ivmod'
   neg 'ivneg'
   eq 'iveq'
   ne 'ivne'
   lt 'ivlt'
   gt 'ivgt'
   le 'ivle'
   ge 'ivge'
   get 'ivget'
   set 'ivset'
   len 'ivlen'
  )
 )
 vec(
  color 6
  text 'vec$n'
  ops(
   cast 'fvcast'
   add 'fvadd'
   sub 'fvsub'
   mul 'fvmul'
   div 'fvdiv'
   mod 'fvmod'
   neg 'fvneg'
   eq 'fveq'
   ne 'fvne'
   lt 'fvlt'
   gt 'fvgt'
   le 'fvle'
   ge 'fvge'
   get 'fvget'
   set 'fvset'
   len 'fvlen'
  )
 )
 mat(
  color 7
  text 'mat$n'
  ops(
   cast 'mcast'
   add 'madd'
   sub 'msub'
   mul 'mmul'
   div 'mdiv'
   neg 'mneg'
   eq 'meq'
   ne 'mne'
   get 'mget'
   set 'mset'
   len 'mlen'
  )
 )
 sampler(
  color 8
  text 'sampler$nD'
  ops()
 )
 samplerCube(
  color 9
  text 'samplerCube'
  ops()
 )
 samplerShadow(
  color 10
  text 'sampler$nDShadow'
  ops()
 )
)