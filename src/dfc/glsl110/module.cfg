modules()
blocks(
 glsl(
  type 'const'
  model 'glsl'
  name 'GLSL objects'
  out('obj')
  arg('name')
 )
 compile(
  type 'block'
  model 'core:compile'
  name 'generate shader code'
  out('end')
  in('file' 'code')
 )
 compop(
  type 'block'
  model 'compop'
  name 'compile an operator'
  out('code')
  in('elements')
 )
 op2(
  type 'macro'
  model 'op2'
  name 'basic binary operator'
  out('res')
  in('t' 'x' 'y')
  arg('op')
 )
 def(
  type 'macro'
  model 'def'
  name 'global definition'
  out('value' 'globalScope')
  in('def')
  arg('name')
 )
 tostring(
  type 'block'
  model 'core:cast'
  out('cast')
  in('t' 'v')
 )
 main(
  type 'macro'
  model 'main'
  name 'Shader main function'
  out('begin' 'main')
  in('return')
 )
 attribute(
  type 'block'
  model 'attribute'
  name 'Attribute'
  out('value')
  in('type')
  arg('name')
 )
 uniform(
  type 'block'
  model 'uniform'
  name 'Uniform'
  out('value')
  in('type')
  arg('name')
 )
 varying(
  type 'block'
  model 'varying'
  name 'Varying'
  out('state')
  in('state' 'value')
  arg('name')
 )
 bcast(
  type 'block'
  model 'core:cast'
  out('cast')
  in('t' 'v')
 )
 band(
  type 'block'
  model 'core:and'
  out('and')
  in('x' 'y')
 )
 bor(
  type 'block'
  model 'core:or'
  out('or')
  in('x' 'y')
 )
 bxor(
  type 'block'
  model 'core:xor'
  out('xor')
  in('x' 'y')
 )
 bnot(
  type 'block'
  model 'core:not'
  out('not')
  in('x')
 )
 beq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 icast(
  type 'block'
  model 'core:cast'
  out('cast')
  in('t' 'v')
 )
 iadd(
  type 'block'
  model 'core:add'
  out('sum')
  in('x' 'y')
 )
 riadd(
  type 'block'
  model 'core:add'
  out('sum')
  in('x' 'y')
 )
 isub(
  type 'block'
  model 'core:sub'
  out('dif')
  in('x' 'y')
 )
 risub(
  type 'block'
  model 'core:sub'
  out('dif')
  in('x' 'y')
 )
 imul(
  type 'block'
  model 'core:mul'
  out('prod')
  in('x' 'y')
 )
 rimul(
  type 'block'
  model 'core:mul'
  out('prod')
  in('x' 'y')
 )
 idiv(
  type 'block'
  model 'core:div'
  out('quot')
  in('x' 'y')
 )
 ridiv(
  type 'block'
  model 'core:div'
  out('quot')
  in('x' 'y')
 )
 neg(
  type 'block'
  model 'core:neg'
  out('neg')
  in('x')
 )
 ieq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 rieq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 ine(
  type 'block'
  model 'core:ne'
  out('ne')
  in('x' 'y')
 )
 rine(
  type 'block'
  model 'core:ne'
  out('ne')
  in('x' 'y')
 )
 ilt(
  type 'block'
  model 'core:lt'
  out('lt')
  in('x' 'y')
 )
 rilt(
  type 'block'
  model 'core:lt'
  out('lt')
  in('x' 'y')
 )
 ile(
  type 'block'
  model 'core:le'
  out('le')
  in('x' 'y')
 )
 rile(
  type 'block'
  model 'core:le'
  out('le')
  in('x' 'y')
 )
 fcast(
  type 'block'
  model 'core:cast'
  out('cast')
  in('t' 'v')
 )
 fadd(
  type 'block'
  model 'core:add'
  out('sum')
  in('x' 'y')
 )
 rfadd(
  type 'block'
  model 'core:add'
  out('sum')
  in('x' 'y')
 )
 fsub(
  type 'block'
  model 'core:sub'
  out('dif')
  in('x' 'y')
 )
 rfsub(
  type 'block'
  model 'core:sub'
  out('dif')
  in('x' 'y')
 )
 fmul(
  type 'block'
  model 'core:mul'
  out('prod')
  in('x' 'y')
 )
 rfmul(
  type 'block'
  model 'core:mul'
  out('prod')
  in('x' 'y')
 )
 fdiv(
  type 'block'
  model 'core:div'
  out('quot')
  in('x' 'y')
 )
 rfdiv(
  type 'block'
  model 'core:div'
  out('quot')
  in('x' 'y')
 )
 fmod(
  type 'block'
  model 'core:mod'
  out('mod')
  in('x' 'y')
 )
 rfmod(
  type 'block'
  model 'core:mod'
  out('mod')
  in('x' 'y')
 )
 feq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 rfeq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 fne(
  type 'block'
  model 'core:ne'
  out('ne')
  in('x' 'y')
 )
 rfne(
  type 'block'
  model 'core:ne'
  out('ne')
  in('x' 'y')
 )
 flt(
  type 'block'
  model 'core:lt'
  out('lt')
  in('x' 'y')
 )
 rflt(
  type 'block'
  model 'core:lt'
  out('lt')
  in('x' 'y')
 )
 fle(
  type 'block'
  model 'core:le'
  out('le')
  in('x' 'y')
 )
 rfle(
  type 'block'
  model 'core:le'
  out('le')
  in('x' 'y')
 )
 bvcast(
  type 'block'
  model 'core:cast'
  out('cast')
  in('t' 'v')
 )
 bvnot(
  type 'block'
  model 'core:not'
  out('not')
  in('x')
 )
 bveq(
  type 'block'
  model 'core:eq'
  out('eq')
  in('x' 'y')
 )
 bvne(
  type 'block'
  model 'core:ne'
  out('ne')
  in('x' 'y')
 )
)
types(
 bool(
  class 'dyn'
  color 0
  text 'bool'
  ops(
   rcast 'tostring'
   cast 'bcast'
   and 'band'
   or 'bor'
   xor 'bxor'
   not 'bnot'
   eq 'beq'
   ne 'bxor'
  )
 )
 int(
  class 'dyn'
  color 1
  text 'int'
  ops(
   rcast 'tostring'
   cast 'icast'
   add 'iadd'
   radd 'riadd'
   sub 'isub'
   rsub 'risub'
   mul 'imul'
   rmul 'rimul'
   div 'idiv'
   rdiv 'ridiv'
   neg 'neg'
   eq 'ieq'
   req 'rieq'
   ne 'ine'
   rne 'rine'
   lt 'ilt'
   rlt 'rilt'
   le 'ile'
   rle 'rile'
  )
 )
 float(
  class 'dyn'
  color 2
  text 'float'
  ops(
   rcast 'tostring'
   cast 'fcast'
   add 'fadd'
   radd 'rfadd'
   sub 'fsub'
   rsub 'rfsub'
   mul 'fmul'
   rmul 'rfmul'
   div 'fdiv'
   rdiv 'rfdiv'
   mod 'fmod'
   rmod 'rfmod'
   neg 'neg'
   eq 'feq'
   req 'rfeq'
   ne 'fne'
   rne 'rfne'
   lt 'flt'
   rlt 'rflt'
   le 'fle'
   rle 'rfle'
  )
 )
 bvec(
  class 'dyn'
  color 3
  text 'bvec$n'
  ops(
   rcast 'tostring'
   cast 'bvcast'
   not 'bvnot'
   eq 'bveq'
   ne 'bvne'
  )
 )
 ivec(
  class 'dyn'
  color 4
  text 'ivec$n'
  ops(
   rcast 'tostring'
   cast 'ivcast'
   add 'ivadd'
   sub 'ivsub'
   mul 'ivmul'
   div 'ivdiv'
   mod 'ivmod'
   neg 'ivneg'
   eq 'iveq'
   ne 'ivne'
   lt 'ivlt'
   gt 'ivgt'
   le 'ivle'
   ge 'ivge'
   get 'ivget'
   set 'ivset'
   len 'ivlen'
  )
 )
 vec(
  class 'dyn'
  color 5
  text 'vec$n'
  ops(
   rcast 'tostring'
   cast 'fvcast'
   add 'fvadd'
   sub 'fvsub'
   mul 'fvmul'
   div 'fvdiv'
   mod 'fvmod'
   neg 'fvneg'
   eq 'fveq'
   ne 'fvne'
   lt 'fvlt'
   gt 'fvgt'
   le 'fvle'
   ge 'fvge'
   get 'fvget'
   set 'fvset'
   len 'fvlen'
  )
 )
 mat(
  class 'dyn'
  color 6
  text 'mat$n'
  ops(
   rcast 'tostring'
   cast 'mcast'
   add 'madd'
   sub 'msub'
   mul 'mmul'
   div 'mdiv'
   neg 'mneg'
   eq 'meq'
   ne 'mne'
   get 'mget'
   set 'mset'
   len 'mlen'
  )
 )
 sampler(
  class 'dyn'
  color 7
  text 'sampler$nD'
  ops(
   rcast 'tostring'
  )
 )
 samplerCube(
  class 'dyn'
  color 8
  text 'samplerCube'
  ops(
   rcast 'tostring'
  )
 )
 samplerShadow(
  class 'dyn'
  color 9
  text 'sampler$nDShadow'
  ops(
   rcast 'tostring'
  )
 )
 compiler(
  class 'io'
  color 9
  text 'GLSL code generator'
  ops(compile 'compile')
 )
 function(
  class 'dyn'
  color 10
  text '$y$+($[$y$+$(, $y$+$))'
  ops()
 )
)