modules()
blocks(
 missing(
  type 'err'
  name 'Invalid Block'
  model 'missing'
 )
 in(
  type 'io'
  model 'in'
  name 'import Signal'
  out('signal')
  arg('name')
  var('out' 'arg')
 )
 out(
  type 'io'
  model 'out'
  name 'export Signal'
  in('signal')
  arg('name')
  var('in' 'arg')
 )
 string(
  type 'str'
  model 'str'
  name 'constant string'
  out('value')
  arg('string')
  var('out' 'arg')
 )
 const(
  type 'ce'
  model 'const'
  name 'constant expression'
  out('value')
  arg('expr')
  var('out' 'arg')
 )
 depend(
  type 'dep'
  model 'dep'
  name 'signal dependency'
  out('signal')
  in('signal' 'ignored')
  var('in')
 )
 pack(
  type 'pack'
  model 'pack'
  name 'pack signals'
  out('packed')
  in('elements')
  var('in')
 )
 unpack(
  type 'dep'
  model 'unpack'
  name 'unpack signals'
  out('elements')
  in('packed')
  var('out')
 )
 signal(
  type 'func'
  model 'signal'
  name 'create signal'
  out('signal')
  in('type' 'array' 'bytes' 'value')
 )
 loop(
  type 'loop'
  model 'loop'
  name 'evaluation loop'
  out('result' 'state')
  in('body' 'start')
 )
 swt(
  type 'swt'
  model 'swt'
  name 'evaluation switch'
  out('result')
  in('x' 'else' 'x=#')
  var('in')
 )
 elemCopy(
  type 'func'
  model 'arrCopy'
  name 'copy array elements'
  out('dstArray')
  in('dstArray' 'dstOfs' 'srcArray' 'srcOfs' 'count')
 )
 dataCopy(
  type 'func'
  model 'strCopy'
  name 'copy bytes'
  out('dstBytes')
  in('dstBytes' 'dstOfs' 'srcBytes' 'srcOfs' 'count')
 )
 elemNew(
  type 'func'
  model 'arrNew'
  name 'create array'
  out('array')
  in('size')
 )
 dataNew(
  type 'func'
  model 'strNew'
  name 'create bytes'
  out('bytes')
  in('size')
 )
 elemLen(
  type 'func'
  model 'arrLen'
  name 'array size'
  out('size')
  in('array')
 )
 dataLen(
  type 'func'
  model 'strLen'
  name 'bytes size'
  out('size')
  in('bytes')
 )
 typeToStr(
  type 'func'
  model 'type2str'
  name 'name of type'
  out('name')
  in('type')
 )
 intToStr(
  type 'func'
  model 'int2str'
  name 'signed int to string'
  out('string')
  in('int')
 )
 strToInt(
  type 'func'
  model 'str2int'
  name 'parse signed int'
  out('int')
  in('string')
 )
 elemGet(
  type 'func'
  model 'arrGet'
  name 'get array element'
  out('element')
  in('array' 'index')
 )
 elemSet(
  type 'func'
  model 'arrSet'
  name 'set array element'
  out('array')
  in('array' 'index' 'element')
 )
 dataRead1(
  type 'func'
  model 'strGet1'
  name 'read 1 byte'
  out('value')
  in('bytes' 'index')
 )
 dataRead2(
  type 'func'
  model 'strGet2'
  name 'read 2 bytes'
  out('value')
  in('bytes' 'index')
 )
 dataRead4(
  type 'func'
  model 'strGet4'
  name 'read 4 bytes'
  out('value')
  in('bytes' 'index')
 )
 dataRead8(
  type 'func'
  model 'strGet8'
  name 'read 8 bytes'
  out('value')
  in('bytes' 'index')
 )
 dataWrite1(
  type 'func'
  model 'strSet1'
  name 'write 1 byte'
  out('bytes')
  in('bytes' 'index' 'value')
 )
 dataWrite2(
  type 'func'
  model 'strSet2'
  name 'write 2 bytes'
  out('bytes')
  in('bytes' 'index' 'value')
 )
 dataWrite4(
  type 'func'
  model 'strSet4'
  name 'write 4 bytes'
  out('bytes')
  in('bytes' 'index' 'value')
 )
 dataWrite8(
  type 'func'
  model 'strSet8'
  name 'write 8 bytes'
  out('bytes')
  in('bytes' 'index' 'value')
 )
 sel(
  type 'func'
  model 'sel'
  name 'select signal'
  out('selected')
  in('x' 'x>=0' 'x<0')
 )
 typeEqual(
  type 'func'
  model 'typeEqual'
  name 'compare same type'
  out('same')
  in('a' 'b')
 )
 elemEqual(
  type 'func'
  model 'arrEqual'
  name 'compare same array'
  out('same')
  in('a' 'b')
 )
 dataEqual(
  type 'func'
  model 'strEqual'
  name 'compare same bytes'
  out('same')
  in('a' 'b')
 )
 dataComp(
  type 'func'
  model 'strComp'
  name 'compare bytes'
  out('comp')
  in('a' 'b')
 )
 icomp(
  type 'func'
  model 'comp'
  name 'compare signed integers'
  out('comp')
  in('a' 'b')
 )
 lt0(
  type 'func'
  model 'lt0'
  name 'less than zero'
  out('comp')
  in('value')
 )
 gt0(
  type 'func'
  model 'gt0'
  name 'greater than zero'
  out('comp')
  in('value')
 )
 le0(
  type 'func'
  model 'le0'
  name 'less or equal zero'
  out('comp')
  in('value')
 )
 ge0(
  type 'func'
  model 'ge0'
  name 'greater or equal zero'
  out('comp')
  in('value')
 )
 eq0(
  type 'func'
  model 'eq0'
  name 'equal to zero'
  out('comp')
  in('value')
 )
 ne0(
  type 'func'
  model 'ne0'
  name 'not equal zero'
  out('comp')
  in('value')
 )
 add(
  type 'func'
  model 'add'
  name 'add integers'
  out('sum')
  in('a' 'b')
 )
 sub(
  type 'func'
  model 'sub'
  name 'subtract integers'
  out('dif')
  in('a' 'b')
 )
 mul(
  type 'func'
  model 'mul'
  name 'multiply integers'
  out('prod')
  in('a' 'b')
 )
 idiv(
  type 'func'
  model 'div'
  name 'divide signed'
  out('quot')
  in('a' 'b')
 )
 imod(
  type 'func'
  model 'mod'
  name 'modulo signed'
  out('mod')
  in('a' 'b')
 )
 and(
  type 'func'
  model 'and'
  name 'bitwise and'
  out('and')
  in('a' 'b')
 )
 or(
  type 'func'
  model 'or'
  name 'bitwise or'
  out('or')
  in('a' 'b')
 )
 xor(
  type 'func'
  model 'xor'
  name 'bitwise xor'
  out('xor')
  in('a' 'b')
 )
 shl(
  type 'func'
  model 'shl'
  name 'shift bits left'
  out('shift')
  in('a' 'b')
 )
 ishr(
  type 'func'
  model 'shr'
  name 'shift bits right signed'
  out('shift')
  in('a' 'b')
 )
)
types(
 void(
  color(1 0)
  ops()
 )
 string(
  color(11 10)
  ops()
 )
 int(
  color(6 6)
  ops()
 )
)
signals()