modules()
blocks(
 missing(
  name 'Invalid Block'
  type 'err'
  model 'missing'
 )
 in(
  name 'Signal input'
  type 'io'
  model 'in'
  out('signal')
  arg('name')
  var('out' 'arg')
 )
 out(
  name 'Signal output'
  type 'io'
  model 'out'
  in('signal')
  arg('name')
  var('in' 'arg')
 )
 const(
  name 'Signal constant'
  type 'ce'
  model 'const'
  out('signal')
  arg('value')
  var('out' 'arg')
 )
 pack(
  name 'Pack Signals'
  type 'pack'
  model 'pack'
  out('bundle')
  in('element')
  var('in')
 )
 split(
  name 'Unpack Signals'
  type 'pack'
  model 'split'
  in('bundle')
  out('element')
  var('out')
 )
 type(
  name 'Get type'
  type 'to'
  model 'type'
  in('x')
  out('type(x)')
 )
 et(
  type 'et'
  model 'et'
  name 'Type element'
  out('element_type')
  in('type')
  arg('element')
 )
 nt(
  type 'nt'
  model 'nt'
  name 'Create type'
  out('new_type')
  in('element_type')
  arg('type_name' 'element_name')
  var('in' 'arg')
 )
 op(
  type 'op'
  model 'op'
  name 'Operation'
  out('result')
  in('type' 'arg')
  arg('operator')
  var('in')
 )
 cv(
  type 'cv'
  model 'cv'
  name 'Compare V-Table'
  out('sel')
  in('typeA' 'typeB' 'onMatch' 'onMiss')
 )
 ct(
  type 'ct'
  model 'ct'
  name 'Compare Type'
  out('sel')
  in('typeA' 'typeB' 'onMatch' 'onMiss')
 )
 err(
  type 'err'
  model 'err'
  name 'Signal Error'
  out('error')
  arg('message')
 )
 vswt(
  type 'mv'
  model 'vswt'
  name 'Type Switch'
  out('result')
  in('x' 'else' 'if x is case')
  arg('case')
  var('in' 'arg')
 )
 swt(
  type 'swt'
  model 'swt'
  name 'Switch'
  out('result')
  in('x' 'else' 'if x = case')
  arg('case')
  var('in' 'arg')
 )
 do(
  type 'do'
  model 'do'
  name 'Start Loop'
  out('state')
  in('init')
  var('in' 'out')
 )
 break(
  type 'br'
  model 'break'
  name 'Break Path'
  out('path')
  in('signal')
  var('in')
 )
 rep(
  type 'rep'
  model 'repeat'
  name 'Repeat Path'
  out('path')
  in('signal')
  var('in')
 )
 loop(
  type 'loop'
  model 'loop'
  name 'End Loop'
  out('result')
  in('next')
  var('out')
 )
 cast(
  name 'Typecast'
  type 'to'
  model 'cast'
  in('t' 'v')
  out('v as t')
 )
 bcast(
  name 'Binary cast'
  type 'to'
  model 'bcast'
  in('t' 'v')
  out('v as t')
 )
 add(
  name 'Addition'
  type 'to'
  model 'add'
  in('x' 'y')
  out('x + y')
 )
 sub(
  name 'Subtraction'
  type 'to'
  model 'sub'
  in('x' 'y')
  out('x - y')
 )
 mul(
  name 'Multiplication'
  type 'to'
  model 'mul'
  in('x' 'y')
  out('x * y')
 )
 div(
  name 'Division'
  type 'to'
  model 'div'
  in('x' 'y')
  out('x / y')
 )
 mod(
  name 'Modulo'
  type 'to'
  model 'mod'
  in('x' 'y')
  out('x mod y')
 )
 neg(
  name 'Negation'
  type 'to'
  model 'neg'
  in('x')
  out('-x')
 )
 and(
  name 'AND-Gate'
  type 'to'
  model 'and'
  in('x' 'y')
  out('x and y')
 )
 or(
  name 'OR-Gate'
  type 'to'
  model 'or'
  in('x' 'y')
  out('x or y')
 )
 xor(
  name 'XOR-Gate'
  type 'to'
  model 'xor'
  in('x' 'y')
  out('x xor y')
 )
 not(
  name 'NOT-Gate'
  type 'to'
  model 'not'
  in('x')
  out('not x')
 )
 eq(
  name 'Compare equal'
  type 'to'
  model 'eq'
  in('x' 'y')
  out('x = y')
 )
 ne(
  name 'Compare not equal'
  type 'to'
  model 'ne'
  in('x' 'y')
  out('x /= y')
 )
 lt(
  name 'Compare less than'
  type 'to'
  model 'lt'
  in('x' 'y')
  out('x < y')
 )
 gt(
  name 'Compare greater than'
  type 'to'
  model 'gt'
  in('x' 'y')
  out('x > y')
 )
 le(
  name 'Compare less or equal'
  type 'to'
  model 'le'
  in('x' 'y')
  out('x <= y')
 )
 ge(
  name 'Compare greater or equal'
  type 'to'
  model 'ge'
  in('x' 'y')
  out('x >= y')
 )
 len(
  name 'Element count'
  type 'to'
  model 'len'
  in('x')
  out('count(x)')
 )
 get(
  name 'Get element'
  type 'to'
  model 'get'
  in('x' 'i')
  out('x[i]')
 )
 set(
  name 'Set element'
  type 'to'
  model 'set'
  in('x' 'i' 'e')
  out('x: x[i] = e')
 )
 con(
  name 'Concatenation'
  type 'to'
  model 'conc'
  in('x' 'y')
  out('xy')
 )
)
types(
 scope(
  text 'evaluation scope'
  color 1
  class 'scope'
 )
 switch(
  text 'switch path'
  color 2
  class 'switch'
 )
 bundle(
  text 'bundle'
  color 3
  class 'bundle'
 )
 cint(
  text 'const int'
  color 4
  class 'int'
 )
 cfloat(
  text 'const float'
  color 5
  class 'float'
 )
 cbytes(
  text 'const bytes'
  color 6
  class 'bytes'
 )
 io(
  text 'io stream'
  color 7
  class 'io'
 )
)